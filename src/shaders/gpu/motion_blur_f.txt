// Sample velocity weighting to reduce background velocity induced leakage.
#define	SAMPLE_WEIGHTING

float	g_weight;

float	AdjustVelocity(float v)
{	return clamp(pow(v, u_pow) * u_strength, -u_max, u_max);	}

vec4	MotionSample(vec2 uv)
{
#ifdef	SAMPLE_WEIGHTING
	vec2	V = texture2D(u_velocity, uv).xy;
	float	w = AdjustVelocity(length(V));
	g_weight += w;
	return texture2D(u_source, uv) * w;
#else
	g_weight += 1.0;
	return texture2D(u_source, uv);
#endif
}

%main%
{
	vec4	ref = texture2D(u_source, v_uv);
	vec2	V = texture2D(u_velocity, v_uv).xy;

	float	l = length(V);
	float	n_l = AdjustVelocity(l);

	V = V * ((l > 0.0001) ? (n_l / l) : 0.0);

#ifdef	SAMPLE_WEIGHTING
	g_weight = n_l;
#else
	g_weight = 1.0;
#endif
	vec4	result =
			(
				MotionSample(v_uv - V) +
				MotionSample(v_uv - V * 0.75) +
				MotionSample(v_uv - V * 0.5) +
				MotionSample(v_uv - V * 0.25) +
			#ifdef	SAMPLE_WEIGHTING
				ref * n_l	+
			#else
				ref	+
			#endif
				MotionSample(v_uv + V * 0.25) +
				MotionSample(v_uv + V * 0.5) +
				MotionSample(v_uv + V * 0.75) +
				MotionSample(v_uv + V)
			);

	float	a = clamp(n_l / u_ivs.x, 0.001, 1.0);
#ifdef	SAMPLE_WEIGHTING
	%out.color% = vec4(g_weight > 0.0 ? result.rgb / g_weight : ref.rgb, a);
#else
	%out.color% = vec4(result.rgb / g_weight, a);
#endif
}
